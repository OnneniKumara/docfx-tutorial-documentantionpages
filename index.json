{
  "api/Calculator.App.html": {
    "href": "api/Calculator.App.html",
    "title": "Class App | DocFx & GitHub Actions tutorial",
    "summary": "Class App Namespace Calculator Assembly Calculator.dll This is our Calculator app, which performs basic mathmatical operations. public static class App Inheritance object App Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(int, int) Takes two numbers and adds them together public static int Add(int one, int two) Parameters one int The first number two int The second number Returns int int value of the addition Multiply(int, int) Multiplies two numbers together public static int Multiply(int one, int two) Parameters one int The first number. two int The second number. Returns int int Subtract(int, int) Subtracts the second number from the first number public static int Subtract(int one, int two) Parameters one int The first number two int The second number Returns int int"
  },
  "api/Calculator.html": {
    "href": "api/Calculator.html",
    "title": "Namespace Calculator | DocFx & GitHub Actions tutorial",
    "summary": "Namespace Calculator Classes App This is our Calculator app, which performs basic mathmatical operations."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Calculator | DocFx & GitHub Actions tutorial",
    "summary": "Calculator"
  },
  "articles/csharp-guidelines.html": {
    "href": "articles/csharp-guidelines.html",
    "title": "C# Guidelines | DocFx & GitHub Actions tutorial",
    "summary": "C# Guidelines General Use four spaces of indentation (no tabs!) Avoid this, unless necessary Use async/await for any operations that include I/O (e.g reading/writing to a disk, database/network calls, etc) Validation Use FluentValidation to guard client input (e.g on API's) Use built-in argument checks for all method parameters Commenting Use XML comments on all classes and public methods Don't use comments for obvious logic"
  },
  "articles/testing.html": {
    "href": "articles/testing.html",
    "title": "Testing | DocFx & GitHub Actions tutorial",
    "summary": "Testing Unit tests All methods should be unit tested Test the happy path and some failing paths Use code coverage tools to validate your work Integration tests All database calls should be tested Use an inmemory database where possible"
  },
  "index.html": {
    "href": "index.html",
    "title": "DocFx & GitHub Actions - tutorial project - the generated documentation site | DocFx & GitHub Actions tutorial",
    "summary": "DocFx & GitHub Actions - tutorial project - the generated documentation site Introduction This is the documentation site automatically generated by DocFx and deployed to GitHub Pages using GitHub Actions. The repository containing the project can be found here docFx-tutorial-project. This project provides a simple and effective way to generate static documentation websites from markdown files and .NET source code using DocFx. It includes various examples and guidelines to help you get started with DocFx and GitHub actions. From this point on, starts the default DocFx generated documentation. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "restapi/OpenApiNote.html": {
    "href": "restapi/OpenApiNote.html",
    "title": "OpenAPI Version Support | DocFx & GitHub Actions tutorial",
    "summary": "OpenAPI Version Support Currently (May 9, 2025), DocFX does not support OpenAPI 3.0 specifications. For example, swagger.json files generated with OpenAPI 3.0 are not compatible. OpenAPI 2.0 (swagger.json in OpenAPI 2 format) is supported. Check the progress of this feature request here: https://github.com/dotnet/docfx/issues/2742."
  },
  "restapi/swagger.html": {
    "href": "restapi/swagger.html",
    "title": "Swagger Petstore | DocFx & GitHub Actions tutorial",
    "summary": "Swagger Petstore pet Everything about your Pets | Improve this Doc View Source uploadFile uploads an image Request POST /pet/{petId}/uploadImage Parameters Name Type Default Notes *petId ID of pet to update additionalMetadata Additional data to pass to server file file to upload Responses Status Code Type Description Samples 200 ApiResponse successful operation | Improve this Doc View Source addPet Add a new pet to the store Request POST /pet Parameters Name Type Default Notes *body Pet Pet object that needs to be added to the store Responses Status Code Type Description Samples 405 Invalid input | Improve this Doc View Source updatePet Update an existing pet Request PUT /pet Parameters Name Type Default Notes *body Pet Pet object that needs to be added to the store Responses Status Code Type Description Samples 400 Invalid ID supplied 404 Pet not found 405 Validation exception | Improve this Doc View Source findPetsByStatus Finds Pets by status Multiple status values can be provided with comma separated strings Request GET /pet/findByStatus?status Parameters Name Type Default Notes *status Status values that need to be considered for filter Responses Status Code Type Description Samples 200 Pet[] successful operation 400 Invalid status value | Improve this Doc View Source findPetsByTags Finds Pets by tags Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. Request GET /pet/findByTags?tags Parameters Name Type Default Notes *tags Tags to filter by Responses Status Code Type Description Samples 200 Pet[] successful operation 400 Invalid tag value | Improve this Doc View Source getPetById Find pet by ID Returns a single pet Request GET /pet/{petId} Parameters Name Type Default Notes *petId ID of pet to return Responses Status Code Type Description Samples 200 Pet successful operation 400 Invalid ID supplied 404 Pet not found | Improve this Doc View Source updatePetWithForm Updates a pet in the store with form data Request POST /pet/{petId} Parameters Name Type Default Notes *petId ID of pet that needs to be updated name Updated name of the pet status Updated status of the pet Responses Status Code Type Description Samples 405 Invalid input | Improve this Doc View Source deletePet Deletes a pet Request DELETE /pet/{petId} Parameters Name Type Default Notes api_key *petId Pet id to delete Responses Status Code Type Description Samples 400 Invalid ID supplied 404 Pet not found store Access to Petstore orders | Improve this Doc View Source getInventory Returns pet inventories by status Returns a map of status codes to quantities Request GET /store/inventory Responses Status Code Type Description Samples 200 object successful operation | Improve this Doc View Source placeOrder Place an order for a pet Request POST /store/order Parameters Name Type Default Notes *body Order order placed for purchasing the pet Responses Status Code Type Description Samples 200 Order successful operation 400 Invalid Order | Improve this Doc View Source getOrderById Find purchase order by ID For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions Request GET /store/order/{orderId} Parameters Name Type Default Notes *orderId ID of pet that needs to be fetched Responses Status Code Type Description Samples 200 Order successful operation 400 Invalid ID supplied 404 Order not found | Improve this Doc View Source deleteOrder Delete purchase order by ID For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors Request DELETE /store/order/{orderId} Parameters Name Type Default Notes *orderId ID of the order that needs to be deleted Responses Status Code Type Description Samples 400 Invalid ID supplied 404 Order not found user Operations about user | Improve this Doc View Source createUsersWithListInput Creates list of users with given input array Request POST /user/createWithList Parameters Name Type Default Notes *body User[] List of user object Responses Status Code Type Description Samples default successful operation | Improve this Doc View Source getUserByName Get user by user name Request GET /user/{username} Parameters Name Type Default Notes *username The name that needs to be fetched. Use user1 for testing. Responses Status Code Type Description Samples 200 User successful operation 400 Invalid username supplied 404 User not found | Improve this Doc View Source updateUser Updated user This can only be done by the logged in user. Request PUT /user/{username} Parameters Name Type Default Notes *username name that need to be updated *body User Updated user object Responses Status Code Type Description Samples 400 Invalid user supplied 404 User not found | Improve this Doc View Source deleteUser Delete user This can only be done by the logged in user. Request DELETE /user/{username} Parameters Name Type Default Notes *username The name that needs to be deleted Responses Status Code Type Description Samples 400 Invalid username supplied 404 User not found | Improve this Doc View Source loginUser Logs user into the system Request GET /user/login?username&password Parameters Name Type Default Notes *username The user name for login *password The password for login in clear text Responses Status Code Type Description Samples 200 string successful operation 400 Invalid username/password supplied | Improve this Doc View Source logoutUser Logs out current logged in user session Request GET /user/logout Responses Status Code Type Description Samples default successful operation | Improve this Doc View Source createUsersWithArrayInput Creates list of users with given input array Request POST /user/createWithArray Parameters Name Type Default Notes *body User[] List of user object Responses Status Code Type Description Samples default successful operation | Improve this Doc View Source createUser Create user This can only be done by the logged in user. Request POST /user Parameters Name Type Default Notes *body User Created user object Responses Status Code Type Description Samples default successful operation Definitions ApiResponse Name Type Notes code integer (int32) type string message string Pet Name Type Notes id integer (int64) category Category[] name string photoUrls array tags Tag[] status string pet status in the store Category Name Type Notes id integer (int64) name string Tag Name Type Notes id integer (int64) name string Order Name Type Notes id integer (int64) petId integer (int64) quantity integer (int32) shipDate string (date-time) status string Order Status complete boolean User Name Type Notes id integer (int64) username string firstName string lastName string email string password string phone string userStatus integer (int32) User Status"
  }
}